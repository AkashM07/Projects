import json
import time
import math
import multiprocessing
from itertools import permutations
from stepper_class import Stepper
from RPi import GPIO
# import server1
# from flask import Flask

from turret import Turret

##################################################### LOAD TEAM INFO ###############################################################

file_name = "init_loc.json"

try:
    # Open the file and load the JSON data
    with open(file_name, 'r') as json_file:
        data = json.load(json_file)
    
    # Declare Team Name
    my_team = next((team for team in data if team["Team Name"] == "Bored"), None)
    
    # Convert starting coordinates into meters
    my_team_x = float(my_team['x'])/100
    my_team_y = float(my_team['y'])/100
        
    # Print out team name and position to terminal; otherwise, print no data found
    if my_team is not None:
        print(f"Team Name: {my_team['Team Name']}")
        print(f"Starting X Position: {my_team_x}")
        print(f"Starting Y Position: {my_team_y}")
    else:
        print(f"No data found for team '{my_team_name}'.")

except FileNotFoundError:
    print(f"Error: The file '{file_name}' was not found.")
except json.JSONDecodeError:
    print(f"Error: Failed to decode JSON from '{file_name}'. Please check the file format.")
except Exception as e:
    print(f"An unexpected error occurred: {e}")
    
########################################### TRANSFER TARGET DATA/MOTOR CONTROL #########################################################
    
target_file_name = "data_test.json"
    
GPIO.setmode(GPIO.BCM)
laserPin = 25
GPIO.setup(laserPin, GPIO.OUT)
GPIO.output(laserPin,0) # Keep laser off to start

base_motor_pins = [4,17,27,22]
turret_motor_pins = [12,16,20,21]

turretHeight = 0.12 # (0.5 FOR EXAMPLE), KEEP IN METERS, turret axle height above ground level

targetAnglesList = []
phase2TargetIDs = [1,8,3,5] # you can change the targets here and the order to test it out

try:
    
#     data_2 = deepcopy(targets)
    with open(target_file_name, 'r') as file: # pull json file of target coordinates
        data_2 = json.load(file)
    
    # Instantiate Turret object
    turret_init_pos = [my_team_x, my_team_y, turretHeight]  # in meters
    turret_instance = Turret(turret_init_pos,base_motor_pins,turret_motor_pins,laserPin)
    
    # Instantiate Stepper object and intially zero motors
    m1 = Stepper(base_motor_pins, turret_instance.lock1, 0)
    m2 = Stepper(turret_motor_pins, turret_instance.lock2, 0)
    m2.rotate(0.5)
    m1.goAngle(0)
    m2.goAngle(0)
    print(f"Current Azimuth (should be zero): {m1.reportAngle()}")
    print(f"Current Altitude (should be zero): {m2.reportAngle()}")
    
    # Create dictionary to copy and sort potentially unorganized JSON in ascending order
    target_dict = {
        target["target number"]: {
            "x": target["x"],
            "y": target["y"],
            "z": target["z"]
        }
        for target in sorted(data_2, key=lambda x: int(x["target number"]))
    }

    # Select all the targets and put them into an array with the coresponding angles
    for key, item in target_dict.items(): # Iterate through the JSON structure
    
        ######## Motor Control ########
        
        # Find the target azimuthal and altitude angles from +x axis
        target_id = int(key) # want to be able to organize list of target values (key)
        x_coord = float(item["x"])/100 # in meters
        y_coord = float(item["y"])/100
        z_coord = float(item["z"])/100
        target_coord = [x_coord, y_coord, z_coord]
        
        x_Diff = x_coord - my_team_x
        y_Diff = y_coord - my_team_y
            
        hypotenuse = math.sqrt((x_Diff**2) + (y_Diff**2))
        azimuthal_angle = (math.degrees(math.atan2(y_Diff, x_Diff))+360)%360 # value between 0 and 360 CCW, atan2 accounts for quadrant mathematics
            
        distance = hypotenuse
        height_Diff = z_coord - turretHeight
        altitude_angle = (math.degrees(math.atan2(height_Diff, distance)))%360 # CHANGED TO SHIFT FROM -PI to PI TO 0 TO 360
        
        targetAnglesList.append([azimuthal_angle,altitude_angle,target_id])
    
    # Load new list of targets
    selectedTargets = []
    for elementID in phase2TargetIDs: selectedTargets.append(targetAnglesList[elementID-1])
    
    print(selectedTargets)
    
    ############################################### OPTIMIZED MOTOR CONTROL ########################################################
    
    # Used to calculate time to rotate between two angles
    def calcTimeToRotate(angles1,angles2):
        z = angles1[0] - angles2[0]
        if z > 180: z -= 360
        elif z < -180: z += 360
        z = abs(z)
        
        t = abs(angles1[1] - angles2[1])

        return max(z,t)
    
    # Determine the optimal sequence of targets (minimizing time) using brute force.
    initialAngles = [m1.reportAngle(),m2.reportAngle()]
    min_time = float('inf')  # Start with a very large time
    best_sequence = None
    
    # Generate all permutations of the target coordinates
    for sequence in permutations(selectedTargets):
        currentAngles = initialAngles
        total_time = 0
        
        # Calculate the total time for this sequence
        for next_angle in sequence:
            time_to_target = calcTimeToRotate(next_angle, currentAngles)
            total_time += time_to_target
            currentAngles = next_angle
        
        # Update if this sequence is faster
        if total_time < min_time:
           min_time = total_time
           best_sequence = sequence

    # Hit the targets in the optimal sequence
    print(f"Optimal sequence: {best_sequence}")

    # Initiate laser upon motor completion
    motor1_done = multiprocessing.Event()
    motor2_done = multiprocessing.Event()

    def motor1_complete():
        motor1_done.set()

    def motor2_complete():
        motor2_done.set()

    for k in best_sequence:

        # Rotate motor to target
        motor1_done.clear()
        motor2_done.clear()
        m1.goAngle(k[0], motor1_complete)
        m2.goAngle(k[1], motor2_complete)
        motor1_done.wait()
        motor2_done.wait()
        print(f"Current Azimuth: {m1.reportAngle()}")
        print(f"Current Altitude: {m2.reportAngle()}")
        
        # Hit Target
        turret_instance.hitTarget(3)
    
    print("Done hitting targets. Zeroing motor...")    
    motor1_done.clear()
    motor2_done.clear()      
    
    m1.goAngle(0, motor1_complete)
    m2.goAngle(0, motor2_complete)
    motor1_done.wait()
    motor2_done.wait()
    print(f"Current Azimuth (should be zero): {m1.reportAngle()}")
    print(f"Current Altitude (should be zero): {m2.reportAngle()}")
    
    print("Motor has been zeroed.")
    
except FileNotFoundError:
    print(f"Error: The file '{file_name}' was not found.")
except json.JSONDecodeError:
    print(f"Error: Failed to decode JSON from '{file_name}'. Please check the file format.")
except Exception as e:
    print(f"An unexpected error occurred: {e}")
finally: GPIO.cleanup()


