# Processing Code

import processing.serial.*;
Serial myPort;

PImage[] gif;
int numberOfFrames;

// block x values, respectively
int x1 = 0;
int x2 = 90;
int x3 = 180;
int x4 = 270;
int x5 = 360;
int x6 = 450; 
int blocksHit; // variable indicating how many blocks the user has hit to determine level 1, 2, or 3
int[] block_locationX = {x1, x2, x3, x4, x5, x6}; // array of updated block X positions for outputting to screen
int block_locationY = 100;

// turret and bullet x and y coordinates
float turret_positionX;
float turret_positionY;
float bullet_positionX;
float bullet_positionY;

// block hit boolean values, respectively
boolean x1Hit = false;
boolean x2Hit = false;
boolean x3Hit = false;
boolean x4Hit = false;
boolean x5Hit = false;
boolean x6Hit = false;
boolean[] arrayBlockHit = {x1Hit, x2Hit, x3Hit, x4Hit, x5Hit, x6Hit};

// colors
int back_colorValue; // 255 -> white, 0 -> black
int piece_colorValue; // 255,0,0 -> red, 255, 255, 0 -> yellow

int iterator;

Table table;
String title = month()+"."+day()+"-"+hour()+"h"+minute()+"m-"+second()+"s"+".csv";

void setup() {
  numberOfFrames = 8; // 8 frames for the gif
  gif = new PImage[numberOfFrames]; // instantiates the variable "gif"
  
  int iterator = 0;
  while (iterator < numberOfFrames) {
    gif[iterator] = loadImage("frame_"+iterator+"_delay-0.1s.gif");
    iterator++;
  }
  iterator = 0;
  
  size(512, 512);
  
  println(Serial.list()); // list all available serial ports
  myPort = new Serial(this, Serial.list()[0], 115200); //instantiate Serial object
  myPort.clear(); // clear the port of any initial junk
  
  table = new Table();
  table.addColumn("LightvDark");
  table.addColumn("Attack?");
  table.addColumn("Pot");
}

void draw() {
   
   while (myPort.available () > 0) { // make sure port is open
     String inString = myPort.readStringUntil('\n'); // read input string
  
     if (inString != null) { // ignore null strings
       inString = trim(inString); // trim off any whitespace
       String[] xyzaRaw = splitTokens(inString, "\t"); // extract x & y into an array
       
       // proceed only if correct # of values extracted from the string:
       if (xyzaRaw.length == 3) {
         
          // read in from arduino and allocate to array
          int mode_LightDark = int(xyzaRaw[0]); // 1 = light, 0 = dark
          int attackButton_Pressed = int(xyzaRaw[1]); // 1 = pressed, 0 = unpressed
          float pot_position = int(xyzaRaw[2]); // reads between 0-1023
     
          // set X positions of turret and bullet
          turret_positionX = int((float)pot_position*(482.0/1023.0)); // 0->1023 to 0->(512-30) scale to account for width 30 of block
          turret_positionY = 256;
          bullet_positionX = turret_positionX + 15.0;
          bullet_positionY = turret_positionY;
          
          //println("mode: " + mode_LightDark);
          if (mode_LightDark == 1) { // let there be light!
            back_colorValue = 255;
            background(back_colorValue);
            //println("light");
            
            // initialize "cornflower blue" colored blocks on screen
            instantiateBlocks(100, 149, 237);
            
            // declare turret
            fill(255, 0, 255); //purple
            rect(turret_positionX, turret_positionY, 30, 60);
            
            // declare bullet
            fill(255, 0, 0); // red
            circle(bullet_positionX, bullet_positionY, 5);
            
            // track bullet motion
            if (attackButton_Pressed == 1) { // pressed to fire
              while (bullet_positionY > 0) {
                bullet_positionY -= 10;
                compareBulletBlock();
                
                fill(255, 0, 0); // red
                circle(bullet_positionX, bullet_positionY, 5);
              }
            }
            
            fill(50);
            textSize(15);
            text("Akash's ENME351 Final Project!", 300, 500);
            
          } else { // hello darkness, my old friend!
            back_colorValue = 80;
            background(back_colorValue);
            //println("dark");
            
            // initialize "cornflower blue" colored blocks on screen
            instantiateBlocks(100, 149, 237);
            
            // declare turret
            fill(255, 0, 255); // purple
            rect(turret_positionX, turret_positionY, 30, 60);
            
            // declare bullet
            fill(255, 0, 0); // red
            circle(bullet_positionX, bullet_positionY, 5);
            
            // track bullet motion
            if (attackButton_Pressed == 1) { // pressed to fire
              while (bullet_positionY > 0) {
                bullet_positionY -= 10;
                compareBulletBlock();
                
                fill(255, 0, 0); // red
                circle(bullet_positionX, bullet_positionY, 5);
              }
            }
            
            fill(250);
            textSize(15);
            text("Akash's ENME351 Final Project!", 300, 500);
          }          
          bullet_positionY = turret_positionY; // reset to position 256 
          
          // iterates through to see how many blocks have been hit and indicate level to user
          blocksHit = 0;
          for (int i = 0; i < arrayBlockHit.length; i++) {
            if (arrayBlockHit[i]) {
              blocksHit++;
            }
          }
          
          // staggered, passes values 1-3 based on how many blocks have been hit to Arduino
          // more block hit -> higher stage, 6 total blocks
          if (blocksHit <= 1) { // Level 1
            myPort.write('1');
            println("Level 1");
            checkForDestruction(1); // parameter of level 1
 
          } else if (blocksHit <= 3) { // Level 2
            myPort.write('2');
            println("Level 2");
            checkForDestruction(2); // parameter of level 2
            
          } else if (blocksHit <= 5) { // Level 3
            myPort.write('3');
            println("Level 3");
            checkForDestruction(3); // parameter of level 3
            
          } else if (blocksHit <= 6) { // Game over!
            playGif();
            //int startTime = millis();
            //while (millis() - startTime < 1000) {}
      
            myPort.write('4');
            println("done 4");
            
          } else {
            println("error!");
          }
          //println(block_locationX[0]);
          
          TableRow newRow = table.addRow();
          newRow.setFloat("LightvDark", mode_LightDark);
          newRow.setFloat("Attack?", attackButton_Pressed);
          newRow.setFloat("Pot", pot_position);
       }
       saveTable(table, title);
     }
   }
}

// plays gameover gif
void playGif() {
  //println("Iterator: "+iterator);
  image(gif[iterator], 0, 0, width, height);
  iterator++;
  if (iterator == numberOfFrames) iterator = 0;
  //long startTime;
  //for (int frame = 0; frame < gif.length; frame++) {
  //  //startTime = millis();
  //  //gif[frame] = loadImage("frame_"+frame+"_delay-0.1s.gif");
  //  //println(frame);
  //  image(gif[frame], 0, 0, width, height);
    
  //  delay(1000);
  //  //while (millis() - startTime < 1000) {}
  //}
}

// defines block target locations
void instantiateBlocks(int red, int green, int blue) {
  //need to separate locations; otherwise, will pair together instead
  
  block_locationX[0] = x1;
  block_locationX[1] = x2;
  block_locationX[2] = x3;
  block_locationX[3] = x4;
  block_locationX[4] = x5;
  block_locationX[5] = x6;
  
  for (int i = 0; i < block_locationX.length; i++) {
    if(!arrayBlockHit[i]) {
      fill(red, green, blue);
      stroke(back_colorValue);
      rect(block_locationX[i], block_locationY, 40, 15);
    }
  }
}

// only increments blocks that have not been hit
void checkForDestruction(int level_123) {
  for (int i = 0; i < block_locationX.length; i++) {
    if (!arrayBlockHit[i]) { // if block has not been hit, keep it in game
      if (level_123 == 1) { // level 1
        block_locationX[i] += 7;
      } else if (level_123 == 2) { // level 2
        block_locationX[i] += 13;
      } else if (level_123 == 3) { // level 3
        block_locationX[i] += 20;
      }
    }
  }
  
  // "oscilliscope" portion: gives illusion that the tiles are entering from the left and exiting to the right
  for (int i = 0; i < block_locationX.length; i++) {
    if (!arrayBlockHit[i]) { // if block has not been hit, keep it going on entrance
      if (block_locationX[i] > 512) { // if out of bounds, reset to left
        block_locationX[i] = -40+(block_locationX[i]-512); // account for error relative to 512
      }
    }
  }
  x1 = block_locationX[0];
  x2 = block_locationX[1];
  x3 = block_locationX[2];
  x4 = block_locationX[3];
  x5 = block_locationX[4];
  x6 = block_locationX[5];
}

void compareBulletBlock() {
  // center of the circle is above top left corner minus thickness (height) of block
  for (int i = 0; i < block_locationX.length; i++) {
    if (  (bullet_positionY > block_locationY - 15)&&(bullet_positionY < block_locationY)
           &&(bullet_positionX > block_locationX[i])&&(bullet_positionX < block_locationX[i]+40)    ) {
      arrayBlockHit[i] = true;
    }
  }
  x1Hit = arrayBlockHit[0];
  x2Hit = arrayBlockHit[1];
  x3Hit = arrayBlockHit[2];
  x4Hit = arrayBlockHit[3];
  x5Hit = arrayBlockHit[4];
  x6Hit = arrayBlockHit[5];
}
